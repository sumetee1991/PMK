<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class Management_Model extends CI_Model
{
    function __construct(){
        parent::__construct();
    }
    /*
        function GetTotalQueue($data){
            $this->db->select('*');
            $this->db->from('vw_patientqueue');
            $this->db->where($data, FALSE);
            $this->db->where('queueno is NOT NULL', NULL, FALSE);
            $this->db->where('cast(cwhen as date) = cast(NOW() as date)', NULL, FALSE);
            $query = $this->db->get();
            return $query->result();
        }
    */
    function CountFilter(){
        $strquery = "
                    SELECT count(DISTINCT(patientuid)) as count
                    FROM public.vw_patientqueue
                    WHERE selectvs is NOT NULL AND closequeue_vs is NOT NULL
                    ";
        $query = $this->db->query($strquery)->row()->count;       
        return $query;
    }

    function GetFirstBuilding(){
        $this->db->select('uid');
        $this->db->from('tb_building');
        $this->db->where('tb_building.active','Y');
        $this->db->order_by('tb_building.uid', 'ASC');
        $this->db->limit('1');
        $query = $this->db->get();
        return $query->row();
    }

    function GetTotalQueue($data,$categoryUID = NULL){
        $this->db->select('*');
        $this->db->select("((date_part('epoch'::text, NOW()) * 1000::double precision) - lastworklist_cwhen) AS lastworklist_waiting");
        $this->db->from('vw_patientqueue');
        $this->db->where($data, FALSE);
        $strquery = "";
        if($categoryUID != NULL){                
            if (strpos($categoryUID, '_') !== false) {
                $splitStr = explode('_', $categoryUID);
                $strquery = " ( ";
                foreach ($splitStr as $key => $value) {
                    $strquery .= ($key > 0 ? ' OR ' : ' ');
                    $strquery .= " queuecategoryuid = '".$value."' ";
                } 
                $strquery .= " ) ";
                $this->db->where($strquery, NULL,FALSE);
            }else{
                $strquery .= " queuecategoryuid = '".$categoryUID."' ";
            }
            $this->db->where($strquery, NULL,FALSE);
        }
        //$this->db->where('cast(cwhen as date) = cast(NOW() as date)', NULL, FALSE);
        $query = $this->db->get();
        return $query->result();
    }

    function GetTotalQueue_Visit($data,$categoryUID = NULL){
        $this->db->select('*');
        $this->db->select("((date_part('epoch'::text, NOW()) * 1000::double precision) - lastworklist_cwhen) AS lastworklist_waiting");
        $this->db->from('vw_patientqueue');
        $this->db->where($data, FALSE);
        $strquery = "";
        if($categoryUID != NULL){                
            if (strpos($categoryUID, '_') !== false) {
                $splitStr = explode('_', $categoryUID);
                $strquery = " ( ";
                foreach ($splitStr as $key => $value) {
                    $strquery .= ($key > 0 ? ' OR ' : ' ');
                    $strquery .= " queuecategoryuid = '".$value."' ";
                } 
                $strquery .= " ) ";
                $this->db->where($strquery, NULL,FALSE);
            }else{
                $strquery .= " queuecategoryuid = '".$categoryUID."' ";
            }
            $this->db->where($strquery, NULL,FALSE);
        }
        $this->db->order_by('cwhen','DESC');
        //$this->db->where('cast(cwhen as date) = cast(NOW() as date)', NULL, FALSE);
        $query = $this->db->get();
        return $query->result();
    }

    function GetTotalQueue_Revert($data,$categoryUID = NULL){
        if($categoryUID != NULL){                
            if (strpos($categoryUID, '_') !== false) {
                $splitStr = explode('_', $categoryUID);
                $all_query = array();
                for ($i=0; $i < count($splitStr); $i++) {
                    $strquery = "";
                    $strquery .= " queuecategoryuid = '".$splitStr[$i]."' ";

                    $this->db->select('*');
                    $this->db->select("((date_part('epoch'::text, NOW()) * 1000::double precision) - lastworklist_cwhen) AS lastworklist_waiting");
                    $this->db->from('vw_patientqueue');
                    $this->db->where($data, FALSE);
                    $this->db->where($strquery, NULL,FALSE);
                    $this->db->order_by('cwhen', 'DESC');
                    $this->db->limit(80);
                    $all_query[$i] = $this->db->get_compiled_select();
                    $this->db->reset_query();
                }
                $final_query = "";
                for ($n=0; $n < count($all_query); $n++) { 
                    $final_query .= ($final_query == "" ? '' : ' UNION ');
                    $final_query .= ' ( ' . $all_query[$n] . ' ) ';
                }
                $final_query .= " ORDER BY queuecategoryorder ASC,cwhen ASC";
                $query = $this->db->query($final_query);
            }else{
                $strquery = " queuecategoryuid = '".$categoryUID."' ";
                $this->db->select('*');
                $this->db->select("((date_part('epoch'::text, NOW()) * 1000::double precision) - lastworklist_cwhen) AS lastworklist_waiting");
                $this->db->from('vw_patientqueue');
                $this->db->where($data, FALSE);
                $this->db->where($strquery, NULL,FALSE);
                $this->db->order_by('cwhen', 'DESC');
                $this->db->limit(80);
                $query = $this->db->get();
            }
            //$this->db->where($strquery, NULL,FALSE);
        }else{
            $this->db->select('*');
            $this->db->select("((date_part('epoch'::text, NOW()) * 1000::double precision) - lastworklist_cwhen) AS lastworklist_waiting");
            $this->db->from('vw_patientqueue');
            $this->db->where($data, FALSE);
            $this->db->order_by('cwhen', 'DESC');
            $query = $this->db->get();
        }
        return $query->result();

        /*

            $this->db->select('*');
            $this->db->select("((date_part('epoch'::text, NOW()) * 1000::double precision) - lastworklist_cwhen) AS lastworklist_waiting");
            $this->db->from('vw_patientqueue');
            $this->db->where($data, FALSE);
            $strquery = "";
            if($categoryUID != NULL){                
                if (strpos($categoryUID, '_') !== false) {
                    $splitStr = explode('_', $categoryUID);
                    $strquery = " ( ";
                    foreach ($splitStr as $key => $value) {
                        $strquery .= ($key > 0 ? ' OR ' : ' ');
                        $strquery .= " queuecategoryuid = '".$value."' ";
                    } 
                    $strquery .= " ) ";
                    $this->db->where($strquery, NULL,FALSE);
                }else{
                    $strquery .= " queuecategoryuid = '".$categoryUID."' ";
                }
                $this->db->where($strquery, NULL,FALSE);
            }
            $this->db->order_by('cwhen', 'DESC');
            //$this->db->where('cast(cwhen as date) = cast(NOW() as date)', NULL, FALSE);
            $query = $this->db->get();
            return $query->result();
        */
    }

    function GetQueueNewHN($data){
        if (strpos($data['queuecategoryuid'], '_') !== false) {
            $splitStr = explode('_', $data['queuecategoryuid']);
            $all_query = array();
            for ($i=0; $i < count($splitStr); $i++) {
                $strquery = "(
                        SELECT *
                        , ((date_part('epoch'::text, NOW()) * 1000::double precision) - lastworklist_cwhen) AS lastworklist_waiting
                        FROM vw_patientqueue 
                        WHERE 
                        active = 'Y' AND
                        (
                            (selectvs is NOT NULL AND closequeue_vs is NOT NULL) OR
                            (selectvs is NULL AND closequeue_vs is NULL)
                        ) AND
                        selectnewhn is NOT NULL AND 
                        closqueue_registerhn is NULL AND 
                        cancelqueue_registerhn is NULL 
                    ";
                $strquery .= " AND queuecategoryuid = '".$splitStr[$i]."' ";
                $strquery .= " ORDER BY queuecategoryorder ASC,cwhen ASC";
                $strquery .= " LIMIT 80 ) ";
                $all_query[$i] = $strquery;
            }
            $final_query = "";
            for ($n=0; $n < count($all_query); $n++) { 
                $final_query .= ($final_query == "" ? '' : ' UNION ');
                $final_query .= $all_query[$n];
            }
            $final_query .= " ORDER BY queuecategoryorder ASC,cwhen ASC";
            $query = $this->db->query($final_query)->result();
        }else{

            $strquery = "
                            SELECT *
                            , ((date_part('epoch'::text, NOW()) * 1000::double precision) - lastworklist_cwhen) AS lastworklist_waiting
                            FROM vw_patientqueue 
                            WHERE 
                            active = 'Y' AND
                            (
                                (selectvs is NOT NULL AND closequeue_vs is NOT NULL) OR
                                (selectvs is NULL AND closequeue_vs is NULL)
                            ) AND
                            selectnewhn is NOT NULL AND 
                            closqueue_registerhn is NULL AND 
                            cancelqueue_registerhn is NULL 
                        ";
            if(isset($data['patientuid']) && $data['patientuid'] != NULL){
                $strquery .= " AND patientuid = '".$data['patientuid']."' ";
            }elseif(isset($data['queueno']) && $data['queueno'] != NULL){
                $strquery .= " AND queueno = '".$data['queueno']."' ";            
            }else{
                $strquery .= "
                                AND groupprocessuid = '".$data['groupprocessuid']."' 
                            ";
                if (strpos($data['queuecategoryuid'], '_') !== false) {
                    $splitStr = explode('_', $data['queuecategoryuid']);
                    $strquery .= " AND ( ";
                    foreach ($splitStr as $key => $value) {
                        $strquery .= ($key > 0 ? ' OR ' : ' ');
                        $strquery .= " queuecategoryuid = '".$value."' ";
                    } 
                    $strquery .= " ) ";
                }else{
                    $strquery .= " AND queuecategoryuid = '".$data['queuecategoryuid']."' ";
                }

            }
            $strquery .= " ORDER BY queuecategoryorder ASC,cwhen ASC";
            $strquery .= " LIMIT 80 ";
            $query = $this->db->query($strquery)->result();
        } 
        return $query;
        /*


            $strquery = "
                            SELECT *
                            , ((date_part('epoch'::text, NOW()) * 1000::double precision) - lastworklist_cwhen) AS lastworklist_waiting
                            FROM vw_patientqueue 
                            WHERE 
                            active = 'Y' AND
                            (
                                (selectvs is NOT NULL AND closequeue_vs is NOT NULL) OR
                                (selectvs is NULL AND closequeue_vs is NULL)
                            ) AND
                            selectnewhn is NOT NULL AND 
                            closqueue_registerhn is NULL AND 
                            cancelqueue_registerhn is NULL 
                        ";
            if(isset($data['patientuid']) && $data['patientuid'] != NULL){
                $strquery .= " AND patientuid = '".$data['patientuid']."' ";
            }elseif(isset($data['queueno']) && $data['queueno'] != NULL){
                $strquery .= " AND queueno = '".$data['queueno']."' ";            
            }else{
                $strquery .= "
                                AND groupprocessuid = '".$data['groupprocessuid']."' 
                            ";
                if (strpos($data['queuecategoryuid'], '_') !== false) {
                    $splitStr = explode('_', $data['queuecategoryuid']);
                    $strquery .= " AND ( ";
                    foreach ($splitStr as $key => $value) {
                        $strquery .= ($key > 0 ? ' OR ' : ' ');
                        $strquery .= " queuecategoryuid = '".$value."' ";
                    } 
                    $strquery .= " ) ";
                }else{
                    $strquery .= " AND queuecategoryuid = '".$data['queuecategoryuid']."' ";
                }

            }
            $strquery .= " ORDER BY queuecategoryorder ASC,cwhen ASC";
            $query = $this->db->query($strquery)->result();      
        */
    }

    function GetQueueRegister($data){
        if (strpos($data['queuecategoryuid'], '_') !== false) {
            $splitStr = explode('_', $data['queuecategoryuid']);
            $all_query = array();
            for ($i=0; $i < count($splitStr); $i++) {
                $strquery = "(
                            SELECT * 
                            , ((date_part('epoch'::text, NOW()) * 1000::double precision) - lastworklist_cwhen) AS lastworklist_waiting
                            FROM vw_patientqueue 
                            WHERE 
                            active = 'Y' AND
                            (
                                (selectvs is NOT NULL AND closequeue_vs is NOT NULL) OR
                                (selectvs is NULL AND closequeue_vs is NULL)
                            ) AND
                            (
                                (
                                    selectnewhn is NOT NULL AND 
                                    closqueue_registerhn is NOT NULL
                                ) OR
                                (
                                    selectnewhn is NULL
                                )
                            ) AND
                            selectpayor is NOT NULL AND
                            closqueue_register is NULL AND
                            cancelqueue_register is NULL 
                        ";
                $strquery .= " AND queuecategoryuid = '".$splitStr[$i]."' ";
                $strquery .= " ORDER BY queuecategoryorder ASC,cwhen ASC";
                $strquery .= " LIMIT 80 ) ";
                $all_query[$i] = $strquery;
            }
            $final_query = "";
            for ($n=0; $n < count($all_query); $n++) { 
                $final_query .= ($final_query == "" ? '' : ' UNION ');
                $final_query .= $all_query[$n];
            }
            $final_query .= " ORDER BY queuecategoryorder ASC,cwhen ASC";
            $query = $this->db->query($final_query)->result();
        }else{
            $strquery = "
                            SELECT * 
                            , ((date_part('epoch'::text, NOW()) * 1000::double precision) - lastworklist_cwhen) AS lastworklist_waiting
                            FROM vw_patientqueue 
                            WHERE 
                            active = 'Y' AND
                            (
                                (selectvs is NOT NULL AND closequeue_vs is NOT NULL) OR
                                (selectvs is NULL AND closequeue_vs is NULL)
                            ) AND
                            (
                                (
                                    selectnewhn is NOT NULL AND 
                                    closqueue_registerhn is NOT NULL
                                ) OR
                                (
                                    selectnewhn is NULL
                                )
                            ) AND
                            selectpayor is NOT NULL AND
                            closqueue_register is NULL AND
                            cancelqueue_register is NULL 
                        ";
            if(isset($data['patientuid']) && $data['patientuid'] != NULL){
                $strquery .= " AND patientuid = '".$data['patientuid']."' ";
            }elseif(isset($data['queueno']) && $data['queueno'] != NULL){
                $strquery .= " AND queueno = '".$data['queueno']."' ";            
            }else{
                $strquery .= "
                                AND groupprocessuid = '".$data['groupprocessuid']."' 
                            ";
                if (strpos($data['queuecategoryuid'], '_') !== false) {
                    $splitStr = explode('_', $data['queuecategoryuid']);
                    $strquery .= " AND ( ";
                    foreach ($splitStr as $key => $value) {
                        $strquery .= ($key > 0 ? ' OR ' : ' ');
                        $strquery .= " queuecategoryuid = '".$value."' ";
                    } 
                    $strquery .= " ) ";
                }else{
                    $strquery .= " AND queuecategoryuid = '".$data['queuecategoryuid']."' ";
                }

            }
            $strquery .= " ORDER BY queuecategoryorder ASC,cwhen ASC";
            $strquery .= " LIMIT 80 ";
            $query = $this->db->query($strquery)->result();
        }
        return $query;
        /*

            $strquery = "
                            SELECT * 
                            , ((date_part('epoch'::text, NOW()) * 1000::double precision) - lastworklist_cwhen) AS lastworklist_waiting
                            FROM vw_patientqueue 
                            WHERE 
                            active = 'Y' AND
                            (
                                (selectvs is NOT NULL AND closequeue_vs is NOT NULL) OR
                                (selectvs is NULL AND closequeue_vs is NULL)
                            ) AND
                            (
                                (
                                    selectnewhn is NOT NULL AND 
                                    closqueue_registerhn is NOT NULL
                                ) OR
                                (
                                    selectnewhn is NULL
                                )
                            ) AND
                            selectpayor is NOT NULL AND
                            closqueue_register is NULL AND
                            cancelqueue_register is NULL 
                        ";
            if(isset($data['patientuid']) && $data['patientuid'] != NULL){
                $strquery .= " AND patientuid = '".$data['patientuid']."' ";
            }elseif(isset($data['queueno']) && $data['queueno'] != NULL){
                $strquery .= " AND queueno = '".$data['queueno']."' ";            
            }else{
                $strquery .= "
                                AND groupprocessuid = '".$data['groupprocessuid']."' 
                            ";
                if (strpos($data['queuecategoryuid'], '_') !== false) {
                    $splitStr = explode('_', $data['queuecategoryuid']);
                    $strquery .= " AND ( ";
                    foreach ($splitStr as $key => $value) {
                        $strquery .= ($key > 0 ? ' OR ' : ' ');
                        $strquery .= " queuecategoryuid = '".$value."' ";
                    } 
                    $strquery .= " ) ";
                }else{
                    $strquery .= " AND queuecategoryuid = '".$data['queuecategoryuid']."' ";
                }

            }
            $strquery .= " ORDER BY queuecategoryorder ASC,cwhen ASC";
            $query = $this->db->query($strquery)->result();
        */
    }


    function GetQueueRegister_Related($data){
        $strquery = "
                        SELECT * 
                        , ((date_part('epoch'::text, NOW()) * 1000::double precision) - lastworklist_cwhen) AS lastworklist_waiting
                        FROM vw_patientqueue 
                        WHERE 
                        (
                            (selectvs is NOT NULL AND closequeue_vs is NOT NULL) OR
                            (selectvs is NULL AND closequeue_vs is NULL)
                        ) AND
                        (
                            (
                                selectnewhn is NOT NULL AND 
                                closqueue_registerhn is NOT NULL
                            ) OR
                            (
                                selectnewhn is NULL
                            )
                        ) AND
                        selectpayor is NOT NULL AND
                        closqueue_register is NULL AND
                        cancelqueue_register is NULL 
                    ";
        if(isset($data['queueno']) && $data['queueno'] != NULL){
            $strquery .= " 
                AND patientuid = (SELECT patientuid FROM vw_patientqueue WHERE queueno = '".$data['queueno']."' LIMIT 1)
            ";
        }
                        

        $query = $this->db->query($strquery)->result();       
        return $query;
    }

    function GetFilterQueueInfo($data){
        $this->db->select('*');
        $this->db->select("((date_part('epoch'::text, NOW()) * 1000::double precision) - lastworklist_cwhen) AS lastworklist_waiting");
        $this->db->from('vw_patientqueue');
        $this->db->where($data, FALSE);
        //$this->db->where('cast(cwhen as date) = cast(NOW() as date)', NULL, FALSE);
        $this->db->limit(1);
        $query = $this->db->get();
        return $query->result();
    }

    function GetQueueInfo_All_Refno($refno){
        $this->db->select('*');
        $this->db->select("((date_part('epoch'::text, NOW()) * 1000::double precision) - lastworklist_cwhen) AS lastworklist_waiting");
        $this->db->from('vw_patientqueue');
        $this->db->where('refno',$refno);
        $query = $this->db->get();
        return $query->result();
    }

    function GetCounterInfo($CounterID){
        $this->db->select('countername');
        $this->db->from('tb_counter');
        $this->db->where('uid',$CounterID);
        $this->db->where('active','Y');
        $query = $this->db->get();
        return $query->result();
    }

    function GetQueueInfo($QueueNumber){
        $this->db->select('*');
        $this->db->select("((date_part('epoch'::text, NOW()) * 1000::double precision) - lastworklist_cwhen) AS lastworklist_waiting");
        $this->db->from('vw_patientqueue');
        $this->db->where('queueno',$QueueNumber);
        $this->db->where('queueno is NOT NULL', NULL, FALSE);
        //$this->db->where('cast(cwhen as date) = cast(NOW() as date)', NULL, FALSE);
        $query = $this->db->get();
        return $query->result();
    }

    function GetQueueInfo_Related($data){
        $this->db->select('*');
        $this->db->select("((date_part('epoch'::text, NOW()) * 1000::double precision) - lastworklist_cwhen) AS lastworklist_waiting");
        $this->db->from('vw_patientqueue');
        $this->db->where($data);
        $this->db->where('queueno is NOT NULL', NULL, FALSE);
        //$this->db->where('cast(cwhen as date) = cast(NOW() as date)', NULL, FALSE);
        $query = $this->db->get();
        return $query->result();
    }

    function GetHoldMessage(){
        $this->db->select('*');
        $this->db->select("((date_part('epoch'::text, NOW()) * 1000::double precision) - lastworklist_cwhen) AS lastworklist_waiting");
        $this->db->from('tb_message');
        $query = $this->db->get();
        return $query->result();
    }

    function GetCounterData(){    	
		$this->db->select('counterno,countername,groupprocessuid');
		$this->db->from('tb_counter');
		$this->db->where('active', 'Y');
        $this->db->order_by('tb_counter.countername', 'ASC');
		$query = $this->db->get();
		return $query->result();
    }

    function GetCategoryData(){    	
		$this->db->select('uid,code,name');
		$this->db->from('tb_queuecategory');
		$query = $this->db->get();
		return $query->result();
    }

    function GetPatientTypeData(){
    	$this->db->select('uid,name');
    	$this->db->from('tb_patienttype');
		$query = $this->db->get();
    	return $query->result();
    }

    function GetPayorData(){
    	$this->db->select('uid,name');
    	$this->db->from('tb_payor');
		$query = $this->db->get();
    	return $query->result();
    }

    function GetWorklistDescription($ID){
        $this->db->select('description');
        $this->db->from('tb_worklist');
        $this->db->where('uid',$ID);
        $query = $this->db->get();
        return $query->result();
    }

    function GetWorklistStatus($QueueNumber){
        $this->db->select('lastworklist');
        $this->db->from('vw_patientqueue');
        $this->db->where('queueno',$QueueNumber);
        //$this->db->where('cast(cwhen as date) = cast(NOW() as date)', NULL, FALSE);
        $query = $this->db->get();
        return $query->result();
    }

    function GetOPDClinic(){
        $this->db->select('*');
        $this->db->from('tb_opdclinic');
        $query = $this->db->get();
        return $query->result();
    }

    function InsertMessage($data){
        $checkData = array(
            'patientdetailuid' => $data['patientdetailuid'],
            'groupprocessuid' => $data['groupprocessuid'],
        );
        $checkQuery = $this->db->select('*')
                ->from('tr_messagedetail')
                ->where($checkData)
                ->where('cast(cwhen as date) = cast(NOW() as date)',NULL,FALSE)
                ->get()
                ->num_rows();

        if( $checkQuery > 0 ){
            $this->db->set($data, FALSE);
            $this->db->where('patientdetailuid', $data['patientdetailuid']);
            $this->db->update('tr_messagedetail');
        }
        else{
            $this->db->insert('tr_messagedetail', $data);
        }
    }

    function InsertProcessControl($data){
        $this->db->insert('tr_processcontrol', $data);
    }

    function CallQueue($data){
        $this->db->insert('tr_callqueue', $data);
    }

    function HoldQueue($data){
        $this->db->insert('tr_callqueue', $data);
    }

    function RemoveTR($SelectedTable,$data){
        $this->db->where($data);
        $this->db->where('cast(createdate as date) = cast(NOW() as date)', NULL, FALSE);
        $this->db->delete($SelectedTable);
    }


    function GetLocationCounterData($groupprocessuid){      
        $this->db->select('counterno,countername,groupprocessuid');
        $this->db->from('tb_counter');
        $this->db->where('groupprocessuid',$groupprocessuid);
        $this->db->where('active', 'Y');
        $query = $this->db->get();
        return $query->result();
    }

    function GetLocationCategoryData($groupprocessuid){     
        $this->db->select('uid,code,name');
        $this->db->from('tb_queuecategory');
        $this->db->where('groupprocessuid',$groupprocessuid);
        $this->db->order_by('tb_queuecategory.order', 'ASC');
        $query = $this->db->get();
        return $query->result();
    }

}